// Mocks generated by Mockito 5.4.4 from annotations
// in cowlar_task/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cowlar_task/data/models/movie_detail_model.dart' as _i6;
import 'package:cowlar_task/data/models/movie_videos_model.dart' as _i7;
import 'package:cowlar_task/data/models/response_model.dart' as _i2;
import 'package:cowlar_task/data/models/upcoming_movies_model.dart' as _i5;
import 'package:cowlar_task/data/repositories/movie_repo_impl.dart' as _i3;
import 'package:cowlar_task/data/sources/local/upcoming_movies_dao.dart' as _i9;
import 'package:cowlar_task/data/sources/remote/movie_data_source.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponseModel_0<T> extends _i1.SmartFake
    implements _i2.ResponseModel<T> {
  _FakeResponseModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepoImpl extends _i1.Mock implements _i3.MovieRepoImpl {
  MockMovieRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResponseModel<_i5.UpcomingMoviesModel>> fetchUpcomingMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUpcomingMovies,
          [page],
        ),
        returnValue:
            _i4.Future<_i2.ResponseModel<_i5.UpcomingMoviesModel>>.value(
                _FakeResponseModel_0<_i5.UpcomingMoviesModel>(
          this,
          Invocation.method(
            #fetchUpcomingMovies,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<_i5.UpcomingMoviesModel>>);

  @override
  _i4.Future<_i2.ResponseModel<_i6.MovieDetailModel>> getMovieDetails(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.ResponseModel<_i6.MovieDetailModel>>.value(
            _FakeResponseModel_0<_i6.MovieDetailModel>(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<_i6.MovieDetailModel>>);

  @override
  _i4.Future<_i2.ResponseModel<_i7.MovieVideosModel>> getMovieVideos(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieVideos,
          [id],
        ),
        returnValue: _i4.Future<_i2.ResponseModel<_i7.MovieVideosModel>>.value(
            _FakeResponseModel_0<_i7.MovieVideosModel>(
          this,
          Invocation.method(
            #getMovieVideos,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<_i7.MovieVideosModel>>);

  @override
  _i4.Future<List<_i5.UpcomingMovie>> getSavedMovies() => (super.noSuchMethod(
        Invocation.method(
          #getSavedMovies,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.UpcomingMovie>>.value(<_i5.UpcomingMovie>[]),
      ) as _i4.Future<List<_i5.UpcomingMovie>>);

  @override
  _i4.Future<bool> saveMovie(_i5.UpcomingMovie? movie) => (super.noSuchMethod(
        Invocation.method(
          #saveMovie,
          [movie],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [MovieDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDataSource extends _i1.Mock implements _i8.MovieDataSource {
  MockMovieDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResponseModel<dynamic>> fetchUpcomingMovies(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUpcomingMovies,
          [page],
        ),
        returnValue: _i4.Future<_i2.ResponseModel<dynamic>>.value(
            _FakeResponseModel_0<dynamic>(
          this,
          Invocation.method(
            #fetchUpcomingMovies,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<dynamic>>);

  @override
  _i4.Future<_i2.ResponseModel<dynamic>> getMovieDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.ResponseModel<dynamic>>.value(
            _FakeResponseModel_0<dynamic>(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<dynamic>>);

  @override
  _i4.Future<_i2.ResponseModel<dynamic>> getMovieVideos(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieVideos,
          [id],
        ),
        returnValue: _i4.Future<_i2.ResponseModel<dynamic>>.value(
            _FakeResponseModel_0<dynamic>(
          this,
          Invocation.method(
            #getMovieVideos,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel<dynamic>>);
}

/// A class which mocks [UpcomingMoviesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpcomingMoviesDao extends _i1.Mock implements _i9.UpcomingMoviesDao {
  MockUpcomingMoviesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveMovie(_i5.UpcomingMovie? movie) => (super.noSuchMethod(
        Invocation.method(
          #saveMovie,
          [movie],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.UpcomingMovie>> getLocalMovies() => (super.noSuchMethod(
        Invocation.method(
          #getLocalMovies,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.UpcomingMovie>>.value(<_i5.UpcomingMovie>[]),
      ) as _i4.Future<List<_i5.UpcomingMovie>>);
}
